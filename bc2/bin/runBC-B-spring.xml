<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!-- START SNIPPET: e1 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:broker="http://activemq.apache.org/schema/core"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"            
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd        
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd"
        default-autowire="byName" default-lazy-init="true">
<!-- END SNIPPET: e1 -->

    <!-- dataSource for MySQL -->  
    <bean id="dataSource"  
        class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName"  
            value="com.mysql.jdbc.Driver" />  
        <property name="url"  
            value="jdbc:mysql://localhost:3306/bankB3" />  
        <property name="username" value="root" />  
        <property name="password" value="root" />  
    </bean>     
    
    <bean id = "jdbcTemplate"   
         class = "org.springframework.jdbc.core.JdbcTemplate">   
         <property name = "dataSource" ref="dataSource"/>   
    </bean>

	<!--Hibernate SessionFatory-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="annotatedClasses">
			<list>
					<value>com.topfinance.ebo.msg.Ibps10100101</value>
					<value>com.topfinance.ebo.msg.Ibps10200101</value>
					<value>com.topfinance.ebo.msg.Saps60100101</value>			
					<value>com.topfinance.ebo.msg.Hvps11100101</value>
					<value>com.topfinance.ebo.msg.Saps60400101</value>								
			</list>
		</property>
		<property name="hibernateProperties">
			<props>				
				<prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
			</props>
		</property>
	</bean>
	<!--Hibernate TransactionManager-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="ibpsManager"   class="com.cnaps2.cncc.service.impl.IBPSManagerImpl"/>	

	<tx:annotation-driven transaction-manager="transactionManager"/>

	<aop:aspectj-autoproxy/>


	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.cnaps2.cncc.service.impl.*ManagerImpl.*(..))"
					 advice-ref="txAdvice"/>				 
		<aop:advisor pointcut="execution(* com.cnaps2.framework.dao.*Dao.*(..))" advice-ref="txAdvice"/>
	</aop:config>


	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="*" rollback-for="com.cnaps2.framework.exception.AppException"/>
		</tx:attributes>
	</tx:advice>      
    <!-- START SNIPPET: e4 -->
    <!-- lets configure the ActiveMQ JMS broker server to listen on TCP 52000 -->
    <broker:broker useJmx="false" persistent="false" brokerName="localhost">
        <broker:transportConnectors>
            <broker:transportConnector name="CompanyB" uri="tcp://localhost:52000"/>
        </broker:transportConnectors>
    </broker:broker>
    <!-- END SNIPPET: e4 -->



</beans>
