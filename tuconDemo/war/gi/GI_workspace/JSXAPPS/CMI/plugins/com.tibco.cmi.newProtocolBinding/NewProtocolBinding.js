jsx3.lang.Class.defineClass("com.tibco.cmi.newProtocolBinding.NewProtocolBinding",    jsx3.gui.Block,    null,    function(NewProtocolBinding,instance){			var systemUtil = com.tibco.cmi.system.util;      var server = systemUtil.getServer();			var dwrEngine = com.tibco.cmi.dwr.Engine;			var dwrService = com.tibco.cmi.dwr.Service;						instance.onRsrcLoad = function(){				this.getServer().subscribe("newProtocolBinding.getBA",this, this.getBA);				NewProtocolBinding.hostProtocol;				NewProtocolBinding.partnerProtocol ;			};						instance.getBA = function(objEvent){				NewProtocolBinding.BA = objEvent.BA;				NewProtocolBinding.protocolBindingList = objEvent.protocolBinding;				this.getEnableProtocol();			}						instance.getEnableProtocol = function(){				var hostPartyId = NewProtocolBinding.BA.HBinindex;								var me = this;				var getHostProtservice = dwrEngine.loadService('PROTOCOL','getEnabledProtocolList',[hostPartyId]);				getHostProtservice.subscribe(dwrService.ON_SUCCESS, me, me._callback_getHostProt_onSuccess);				getHostProtservice.doCall();								// var getPartnerProtservice = dwrEngine.loadService('PROTOCOL','getEnabledProtocolList',[partnerPartyId]);				// getPartnerProtservice.subscribe(dwrService.ON_SUCCESS, me, me._callback_getPartnerProtocol_onSuccess);				// getPartnerProtservice.doCall();								// interval = setInterval(this.getProtocolList,100);											}						instance.getProtocolList = function(){				var protocolList = [];				var hostLength = NewProtocolBinding.hostProtocol.length;				var partnerLength = NewProtocolBinding.partnerProtocol.length;										if(hostLength > 0 && partnerLength > 0) {					for(var i = 0; i < hostLength; i++) {						var hostProtName = NewProtocolBinding.hostProtocol[i];						for(var j = 0; j < partnerLength; j++) {							var partnerProtName = NewProtocolBinding.partnerProtocol[j];							if(hostProtName == partnerProtName) {								if(NewProtocolBinding.protocolBindingList.length == 0)									protocolList.push(hostProtName);								else {									for(var t = 0; t < NewProtocolBinding.protocolBindingList.length; t++) {										var binding = NewProtocolBinding.protocolBindingList[t];										if(hostProtName != binding.protName)											protocolList.push(hostProtName);									}								}								break;							}						}					}				}													var protocolcdf = new jsx3.xml.Document();				var root = protocolcdf.createDocumentElement("data");				root.setAttribute("jsxid", "jsxroot");				for(var i = 0; i < protocolList.length; i++) {					var record = root.createNode(jsx3.xml.Entity.TYPEELEMENT, "record");					var protocolName = protocolList[i];										record.setAttribute("jsxid", jsx3.xml.CDF.getKey());					record.setAttribute("protocolName", protocolName);					root.appendChild(record);				}				server.getJSXByName("mtxProtocol").setSourceXML(protocolcdf);			  server.getJSXByName("mtxProtocol").repaint();			}						instance._callback_getHostProt_onSuccess = function(objEvent){				NewProtocolBinding.hostProtocol = [];				var protocolList = objEvent.data;				for(var i = 0; i < protocolList.length; i++) {					var protocol = protocolList[i];					NewProtocolBinding.hostProtocol.push(protocol.name);				}								var partnerPartyId = NewProtocolBinding.BA.tpBinindex;				var me = server.getJSXByName("blkNewProtocolBinding");				var getPartnerProtservice = dwrEngine.loadService('PROTOCOL','getEnabledProtocolList',[partnerPartyId]);				getPartnerProtservice.subscribe(dwrService.ON_SUCCESS, me, me._callback_getPartnerProtocol_onSuccess);				getPartnerProtservice.doCall();			}						instance._callback_getPartnerProtocol_onSuccess = function(objEvent){				NewProtocolBinding.partnerProtocol = [];				var protocolList = objEvent.data;				for(var i = 0; i < protocolList.length; i++) {					var protocol = protocolList[i];					NewProtocolBinding.partnerProtocol.push(protocol.name);				}				server.getJSXByName("blkNewProtocolBinding").getProtocolList();			}						instance.save = function(){				var protocolList = this.getSelectedItem();				for(var i = 0; i < protocolList.size(); i++) {					var protName = protocolList.get(i).getAttribute("protocolName");					var protocolBinding = new Object;					protocolBinding.protName = protName;					protocolBinding.BBinindex = NewProtocolBinding.BA.binindex;										var service = dwrEngine.loadService('PROTBINDING','saveProtBinding',[protocolBinding]);					service.doCall();				}						this.getServer().publish({subject:"showEditAgreement"});				}						instance.cancel = function() {				this.getServer().publish({subject:"showEditAgreement"});				}						instance.getSelectedItem = function() {				var mtx = com.tibco.cmi.getJSXByName("mtxProtocol");				var xml = mtx.getXML();				var itemList = xml.selectNodes("//record[@checked='1']");				return itemList;			}									instance.setEnabled = function(btnEnable) { 				var mtx = com.tibco.cmi.getJSXByName("mtxProtocol");				if(btnEnable.getText() == "Enable All") {					for(var i = 0; i < mtx.getSortedIds().length; i++){						var recordId = mtx.getSortedIds()[i];						var record = mtx.getRecordNode(recordId);						record.setAttribute("checked",1);						mtx.redrawRecord(recordId, jsx3.xml.CDF.UPDATE);					}					btnEnable.setText("Disable All",true);				}								else {					for(var i = 0; i < mtx.getSortedIds().length; i++){						var recordId = mtx.getSortedIds()[i];						var record = mtx.getRecordNode(recordId);						record.setAttribute("checked",0);						mtx.redrawRecord(recordId, jsx3.xml.CDF.UPDATE);					}					btnEnable.setText("Enable All",true);				}					}    })